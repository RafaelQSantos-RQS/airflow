x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-your-airflow-image:1.0.0}
  user: "${AIRFLOW_UID:-50000}:0"
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "5"
  restart: always
  networks:
    - internal
  environment:
    &airflow-common-env
    ## Airflow Api
    AIRFLOW__API__EXPOSE_CONFIG: ${AIRFLOW__API__EXPOSE_CONFIG}

    ## Airflow Celery
    AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}

    ## Airflow Core
    AIRFLOW__CORE__AUTH_MANAGER: ${AIRFLOW__CORE__AUTH_MANAGER}
    AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
    AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: ${AIRFLOW__CORE__EXECUTION_API_SERVER_URL}
    AIRFLOW__CORE__TEST_CONNECTION: ${AIRFLOW__CORE__TEST_CONNECTION}

    ## Airflow Database
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: ${AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK}

    ## Airflow Webserver
    AIRFLOW__WEBSERVER__INSTANCE_NAME: ${AIRFLOW__WEBSERVER__INSTANCE_NAME}

    ## Fixed Airflow Configuration
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  postgres:
    image: postgres:${POSTGRES_TAG}
    networks:
      - internal
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:${REDIS_TAG}
    networks:
      - internal
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  apiserver:
    <<: *airflow-common
    container_name: airflow-apiserver
    command: api-server
    networks:
      - external
      - internal
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  dag-processor:
    <<: *airflow-common
    container_name: airflow-dag-processor
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  worker:
    <<: *airflow-common
    deploy:
      mode: replicated
      replicas: ${WORKER_COUNT:-1}
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    depends_on:
      <<: *airflow-common-depends-on
      apiserver:
        condition: service_healthy
      init:
        condition: service_completed_successfully

  triggerer:
    <<: *airflow-common
    container_name: airflow-trigger
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

  init:
    <<: *airflow-common
    container_name: airflow-init
    restart: "no"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db migrate && \
        airflow users create \
        --role Admin \
        --username "${_AIRFLOW_WWW_USER_USERNAME:-airflow}" \
        --password "${_AIRFLOW_WWW_USER_PASSWORD:-airflow}" \
        --firstname "${_AIRFLOW_WWW_USER_FIRSTNAME:-Admin}" \
        --lastname "${_AIRFLOW_WWW_USER_LASTNAME:-Admin}" \
        --email ${_AIRFLOW_WWW_USER_EMAIL:-admin@example.com} \
        || true
    user: "0:0"

  flower:
    <<: *airflow-common
    container_name: airflow-flower
    command: celery flower
    networks:
      - external
      - internal
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
    external: true
    name: ${POSTGRES_EXTERNAL_VOLUME_NAME}

networks:
  internal:
    driver: bridge
  external:
    external: true
    name: ${EXTERNAL_NETWORK_NAME}